// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ROLE {
    USER
    ADMIN
    BANNED
    REP
    EMPLOYEE
}

enum SUBSCRIPTION {
    active
    inactive
    pending
}

model User {
    id             Int       @id @default(autoincrement())
    username       String    @unique
    email          String    @unique
    password       String
    role           ROLE      @default(USER)
    createdAt      DateTime  @default(now())
    subscriptionId String?   @unique
    nameOnAccount  String?
    parentId       Int?
    parent         User?     @relation("ParentChild", fields: [parentId], references: [id])
    children       User[]    @relation("ParentChild")
    dashboard      Dashboard @relation(fields: [dashboardId], references: [id])
    dashboardId    Int
    jobsPickedUp   Job[]     @relation("pickupEmployee")
    jobsDroppedOff Job[]     @relation("dropoffEmployee")
    jobsRequested  Job[]     @relation("submittedBy")
    lineage        Lineage   @relation(fields: [lineageId], references: [id])
    lineageId      Int
}

model Transaction {
    id          Int       @id @default(autoincrement())
    price       Float
    paymentId   String
    Dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
    dashboardId Int
    date        DateTime  @default(now())
}

model Dashboard {
    id           Int           @id @default(autoincrement())
    subscription SUBSCRIPTION  @default(inactive)
    transactions Transaction[]
    User         User[]
}

model Location {
    id        Int     @id @default(autoincrement())
    street    String
    zip       Int
    city      String
    state     String  @default("Il")
    unit      String?
    entryCode String?
    Job       Job[]
}

model Window {
    id         Int      @id @default(autoincrement())
    start      DateTime
    end        DateTime
    jobPickup  Job[]    @relation("pickupWindow")
    jobDropoff Job[]    @relation("dropoffWindow")
}

model Lineage {
    id           Int        @id @default(autoincrement())
    line         User[]
    familyTree   FamilyTree @relation(fields: [familyTreeId], references: [id])
    familyTreeId Int        @default(1)
}

model FamilyTree {
    id   Int       @id @default(autoincrement())
    tree Lineage[]
}

model Job {
    id              Int       @id @default(autoincrement())
    dateSubmitted   DateTime  @default(now())
    datePickedUp    DateTime?
    dateReturned    DateTime?
    message         String?
    quantity        Int
    pickupWindow    Window    @relation(fields: [pickupWindowId], references: [id], name: "pickupWindow")
    pickupWindowId  Int       @unique
    dropOffWindow   Window    @relation(fields: [dropOffWindowId], references: [id], name: "dropoffWindow")
    dropOffWindowId Int       @unique
    location        Location  @relation(fields: [locationId], references: [id])
    locationId      Int
    pickedUpBy      User?     @relation(fields: [pickupUserId], references: [id], name: "pickupEmployee")
    pickupUserId    Int?
    droppedOffBy    User?     @relation(fields: [dropOffUserId], references: [id], name: "dropoffEmployee")
    dropOffUserId   Int?
    submittedBy     User?     @relation(fields: [submittedById], references: [id], name: "submittedBy")
    submittedById   Int?
}
